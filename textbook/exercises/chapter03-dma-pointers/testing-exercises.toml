[[exercises]]
question-id = "chapter-03-Q1"
title = "Question 9 in Fall 2022 Midterm Exam"
difficulty = "Intermediate"
table = false
type = "tracing"
multipart= false

question = '''
Write down the standard output of the following program. Remember to write two "Check Point", since partial marks are given based on these "stop points". You might find it helpful to write down the memory layout.

```{code-block} cpp
#include <iostream>
using namespace std;

int i[5] = {0, 2, 4, 6, 8};
int* p;

void foo() {
  cout << *p << endl;
  ++(*p);
  ++p;
}

void bar() {
  for (int i = 0; i < 3; ++i) {
    foo();
  }
}

int main() {
  p = i;
  bar();
  cout << "Check Point 1" << endl;
  p = i;
  foo();
  cout << "Check Point 2" << endl;
  return 0;
}
```
'''

answer = '''
0
2
4
Check Point 1
1
Check Point 2
'''

[[exercises]]
question-id = "chapter-03-Q2"
title = "Question 3 in Fall 2021 Final Exam"
difficulty = "Intermediate"
table = false
type = "multiple-choice"
multipart= false

question = '''

Consider the following code snippet that manipulates pointers in a main function of a C++ program. 

```{code-block} cpp
int* p = nullptr;
int* q = nullptr;
int* r = nullptr;
int** t = &p;
int** s = &q;
r = p;
p = new int;
q = new int;
*p = 5;
*q = 2;
**s = *p + **t;
```

Which of the following statements (that come after the above snippets executes) prints 5 to the standard output? You may assume `iostream` is included and the `std` namespace is used. Choose all correct answers.

'''

answer = [3,4,7]

choices = [
  "(1) `cout << r;`",
  "(2) `cout << *t;`",
  "(3) `cout << *q;`",
  "(4) `cout << *p;`",
  "(5) `cout << **t;`",
  "(6) `cout << *r;`",
  "(7) `cout << *s;`",
  "(8) `cout << (**s) / 2;`"
]


explanation = '''
(4) `cout << *p;`

(5) `cout << **t;`

(8) `cout << (**s) / 2;` '''



[[exercises]]
question-id = "chapter-03-Q3"
title = "Question 4 in Fall 2018 Midterm Exam"
difficulty = "Intermediate"
table = false
type = "tracing"
multipart= true

LLM = '''
Consider the following `main` function. The line numbers to the left are for reference and are not part of the code.

```{code-block} cpp
#include <iostream>
using namespace std;

int main() {
  int* first_ptr;
  int* second_ptr;
  int** p_ptr;
  first_ptr = new int;
  second_ptr = new int;
  p_ptr = &first_ptr;
  *first_ptr = 4;
  *second_ptr = 8;
  second_ptr = *p_ptr;
  cout << *first_ptr << " " << *second_ptr << endl;
  delete first_ptr;
  delete second_ptr;
  delete *p_ptr;
  return (0);
}
```

(1) What is the output produced by `cout` on line 14 of the code

'''

question = '''
Consider the following `main` function. The line numbers to the left are for reference and are not part of the code.

```{code-block} cpp
#include <iostream>
using namespace std;

int main() {
  int* first_ptr;
  int* second_ptr;
  int** p_ptr;
  first_ptr = new int;
  second_ptr = new int;
  p_ptr = &first_ptr;
  *first_ptr = 4;
  *second_ptr = 8;
  second_ptr = *p_ptr;
  cout << *first_ptr << " " << *second_ptr << endl;
  delete first_ptr;
  delete second_ptr;
  delete *p_ptr;
  return (0);
}
```

(1) What is the output produced by `cout` on line 14 of the code

'''

answer = '''
4 4
'''

[[exercises]]
question-id = "chapter-03-Q4"
title = "Question 4 in Fall 2018 Midterm Exam"
difficulty = "Intermediate"
table = false
type = "multiple-choice"
multipart= true

LLM = '''
Consider the following `main` function. The line numbers to the left are for reference and are not part of the code.

```{code-block} cpp
#include <iostream>
using namespace std;

int main() {
  int* first_ptr;
  int* second_ptr;
  int** p_ptr;
  first_ptr = new int;
  second_ptr = new int;
  p_ptr = &first_ptr;
  *first_ptr = 4;
  *second_ptr = 8;
  second_ptr = *p_ptr;
  cout << *first_ptr << " " << *second_ptr << endl;
  delete first_ptr;
  delete second_ptr;
  delete *p_ptr;
  return (0);
}
```

(2) The program may have a problem with it. What is the problem, if any? Circle only one answer.

'''



question = '''
(2) The program may have a problem with it. What is the problem, if any? Circle only one answer.
'''

answer = [5]

choices = [
  "(1) The program has no problem with it",
  "(2) The program has a memory leak.",
  "(3) The delete on line 17 should not dereference p_ptr, but use it directly.",
  "(4) The program deletes the same region of memory more than once.",
  "(5) 2 and 3.",
  "(6) 2 and 4.",
  "(7) 2, 3 and 4.",
]


explanation = '''
The program has a memory leak because in line 13, it changes what `second_ptr` is pointing 
to without freeing up the memory space it was pointing to.`second_ptr`, `first_ptr`, and `*p_ptr` 
are all pointing to an `int` with 4, while there are three deletes for the same memory space.'''



[[exercises]]
question-id = "chapter-03-Q5"
title = "Question 2 in Fall 2017 Midterm Exam"
difficulty = "Intermediate"
table = false
type = "tracing"
multipart= false

question = '''
Consider the following program. 

```{code-block} cpp
class Point {
  int x;
  int y;

 public:
  Point(int i, int j);
  Point increment_x();
  Point increment_y();
  void print() const;
};
Point::Point(int i, int j) {
  x = i;
  y = j;
}
Point Point::increment_x() {
  ++x;
  return *this;
}
Point Point::increment_y() {
  ++y;
  return *this;
}
void Point::print() const {
  cout << "(" << x << "," << y << ")" << endl;
}
int main() {
  Point a(2, 3);
  // Evaluation is done left to right
  a.increment_x().increment_y().print();
  a.print();
  return 0;
}
```

Assuming the C++ compiler does not optimize away copying of objects. Write the output produced by the program.
'''

answer = '''
(3,4)
(3,3)
'''

explanation = '''
<pre>
(3,4)
</pre>
Recall, `this` is a pointer to the object itself. 


`a.increment_x()` is evaluated first, and would increment the `x` of object `a` making `x` of `a` equal to 3. This would return a new object with `x = 3` and `y = 3`. On this new object, you would call `increment_y()`, which would increment `y` to 4 and return a new object with `x = 3` and `y = 4`. Printing this new object would produce `(3,4)`.
<pre>
(3,3)
</pre>
Printing object `a` would output `(3,3)` due to the previous `a.increment_x()` call. 
'''


[[exercises]]
question-id = "chapter-03-Q6"
title = "Question 3 in Fall 2022 Midterm Exam"
difficulty = "Easy"
table = false
type = "explaination"
multipart= false

question = '''

Consider the following C++ function:

```{code-block} cpp
void AvadaKedavra(int n) {
  int size = n + 1;
  int* q = NULL;
  for (int i = 0; i < 3; ++i) {
    q = new int[size];
  }
}
```

If somewhere in your main function you call `AvadaKedavra(1)`. Based on the memory layout discussed during the lecture, answer this question: from the time this function starts to execute to the time right before it returns, how many bytes are newly allocated on the stack and the heap, respectively?

You may assume:
1. all variables are put in the main memory.
2. an `int` takes 4 bytes
3. we have a 32-bit machine

'''

answer = '''

**Stack**

`n`: 4 bytes

`size`: 4 bytes

`q`: 4 bytes

`i`: 4 bytes

Total: 16 bytes

----------------
**Heap**

`n` is 1, `size` is 2

The loop iterates 3 times, each time it allocates 2 integers. 

Total is 3 * 2 * 4 bytes = 24 bytes.
'''


[[exercises]]
question-id = "chapter-03-Q7"
title = "Question 9 in Fall 2021 Midterm Exam"
difficulty = "Intermediate"
type = "explaination"
table = true

question = '''
Consider the code shown below. You can assume it compiles with no errors and runs. 

```{code-block} cpp
#include <iostream>
using namespace std;

int a = 0;
int* b = &a;
int** c = &b;

int* foo(int** d) {
  (**d)++;
  b = *d;
  int* e = new int;
  *e = 10;
  return e;
}

int main() {
  int* g = nullptr;
  int* f = new int;
  *f = 5;
  a++;

  // Point 1

  g = foo(&f);
  a++;
  (*g)++;

  // Point 2

  return 0;
}

```

In the table below, give the values of the variables indicated in the table columns when program execution reaches each of the two points, Point 1 and Point 2. If a value cannot be obtained due to dereferencing a `nullptr` pointer, write `nullptr` (but assume the program does not stop).

'''

headers = ["Point", "a", "*b", "**c", "*g", "*f"]  
rows = [
  ["Point 1", "", "", "", "", ""],
  ["Point 2", "", "", "", "", ""],
]

answer = [
  ["Point 1", "1", "1", "1", "nullptr", "5"],
  ["Point 2", "2", "6", "6", "11", "6"],
]






[[exercises]]
question-id = "chapter-03-Q8"
title = "Question 10 in Fall 2022 Midterm Exam"
difficulty = "Challenging"
type = "function programming"
table = false
multipart = true

LLM = '''
A Vtuber is an online entertainer who posts videos on Vtube. A Vtuber will have followers on Vtube. As a programmer from Vtube, you are asked to implement a class for Vtuber. The class definition and description are described below.

```{code-block} cpp
#include <iostream>
#include <string>
using namespace std;

class Follower {
 private:
  string name;
  int age;

 public:
  Follower(const string& _name, int _age) {
    name = _name;
    age = _age;
  }
  string get_name() const { return name; }
  int get_age() const { return age; }
};
class Vtuber {
 private:
  // Vtuber Name
  string name;
  // Follower array with a variable size, each element should be a dynamically
  // allocated object of class Follower.
  Follower** followers;
  // The size of follower array.
  int follower_max;
  // Number of followers
  int follower_num;

 public:
  Vtuber(const string& _name);
  ~Vtuber();
  void insert_follower(const string& follower_name, int follower_age);
  void remove_follower(const string& follower_name);
};

```

Specifically, Vtuber's followers member variable is an array of pointers, each pointer pointing to a `Follower` object. The following graph illustrates it.

```{figure} _images/followers.png
```

(1) Implement the constructor for `Vtuber`. Vtuber `name` should be initialized by `_name`, and `follower_max` should be initialized to 2. In addition, you should allocate an array called `followers` using `new`, with an initial size of 2 (the value of `follower_max`). Every element in this array should be a pointer to an object of class `Follower` and initialize all these pointers to `NULL`.

Vtuber::Vtuber (const string& _name) {
  
  // Your code here

}

'''

question = '''

A Vtuber is an online entertainer who posts videos on Vtube. A Vtuber will have followers on Vtube. As a programmer from Vtube, you are asked to implement a class for Vtuber. The class definition and description are described below.

```{code-block} cpp
#include <iostream>
#include <string>
using namespace std;

class Follower {
 private:
  string name;
  int age;

 public:
  Follower(const string& _name, int _age) {
    name = _name;
    age = _age;
  }
  string get_name() const { return name; }
  int get_age() const { return age; }
};
class Vtuber {
 private:
  // Vtuber Name
  string name;
  // Follower array with a variable size, each element should be a dynamically
  // allocated object of class Follower.
  Follower** followers;
  // The size of follower array.
  int follower_max;
  // Number of followers
  int follower_num;

 public:
  Vtuber(const string& _name);
  ~Vtuber();
  void insert_follower(const string& follower_name, int follower_age);
  void remove_follower(const string& follower_name);
};

```

Specifically, Vtuber's followers member variable is an array of pointers, each pointer pointing to a `Follower` object. The following graph illustrates it.

```{figure} _images/followers.png
```

(1) Implement the constructor for `Vtuber`. Vtuber `name` should be initialized by `_name`, and `follower_max` should be initialized to 2. In addition, you should allocate an array called `followers` using `new`, with an initial size of 2 (the value of `follower_max`). Every element in this array should be a pointer to an object of class `Follower` and initialize all these pointers to `NULL`.
'''

starter-code = '''

Vtuber::Vtuber (const string& _name) {
  
  // Your code here

}

'''

answer = '''

Vtuber::Vtuber(const string& _name) {
  name = _name;
  follower_max = 2;
  follower_num = 0;
  followers = new Follower*[follower_max];
  for (int i = 0; i < follower_max; i++) {
    followers[i] = NULL;
  }
}

'''

append-before = '''
#include <iostream>
#include <string>
using namespace std;

class Follower {
 private:
  string name;
  int age;

 public:
  Follower(const string& _name, int _age) {
    name = _name;
    age = _age;
  }
  string get_name() const { return name; }
  int get_age() const { return age; }
  
};
class Vtuber {
 private:
  string name;
  Follower** followers;
  int follower_max;
  int follower_num;

 public:
  Vtuber(const string& _name);

  // getters for testing
  string get_name() const { return name; }
  int get_follower_max() const { return follower_max; }
  int get_follower_num() const { return follower_num; }
  bool followers_all_null() const {
    for (int i = 0; i < follower_max; i++) {
      if (followers[i] != NULL) return false;
    }
    return true;
  }

};
'''

main-function = '''
int main() {
  string vtuber_name;
  getline(cin, vtuber_name);

  Vtuber v(vtuber_name);

  cout << "Vtuber created: " << v.get_name() << endl;
  cout << "Max followers allowed: " << v.get_follower_max() << endl;
  cout << "Current number of followers: " << v.get_follower_num() << endl;
  cout << "All followers initialized to NULL: "
       << (v.followers_all_null() ? "Yes" : "No") << endl;

  return 0;
}
'''

[[exercises.testcases]]
input = "Q3.P1.T1.in"
output = "Q3.P1.T1.out"

[[exercises.testcases]]
input = "Q3.P1.T2.in"
output = "Q3.P1.T2.out"

[[exercises.testcases]]
input = "Q3.P1.T3.in"
output = "Q3.P1.T3.out"




[[exercises]]
question-id = "chapter-03-Q9"
title = "Question 10 in Fall 2022 Midterm Exam"
difficulty = "Challenging"
type = "function programming"
table = false
multipart = true

LLM = '''
A Vtuber is an online entertainer who posts videos on Vtube. A Vtuber will have followers on Vtube. As a programmer from Vtube, you are asked to implement a class for Vtuber. The class definition and description are described below.

```{code-block} cpp
#include <iostream>
#include <string>
using namespace std;

class Follower {
 private:
  string name;
  int age;

 public:
  Follower(const string& _name, int _age) {
    name = _name;
    age = _age;
  }
  string get_name() const { return name; }
  int get_age() const { return age; }
};
class Vtuber {
 private:
  // Vtuber Name
  string name;
  // Follower array with a variable size, each element should be a dynamically
  // allocated object of class Follower.
  Follower** followers;
  // The size of follower array.
  int follower_max;
  // Number of followers
  int follower_num;

 public:
  Vtuber(const string& _name);
  ~Vtuber();
  void insert_follower(const string& follower_name, int follower_age);
  void remove_follower(const string& follower_name);
};

```

Specifically, Vtuber's followers member variable is an array of pointers, each pointer pointing to a `Follower` object. 


(2) Every Vtuber in `Vtube` can get new followers or lose their current followers. This is implemented by two methods: `insert_follower` and `remove_follower`. Now you are asked to implement these two methods:

a. For insert_follower, a follower name and follower age are given. You need to create a dynamically allocated object of `Follower` and insert it into the followers array (in the first available location), using `new` operator. If the array is full, you should double `follower_max`, allocate a new follower array, and move all the data into this `new` array, and insert the `new` follower. Write the code below.

void Vtuber::insert_follower(const string& follower_name, 
                            int follower_age) {

  // Your code here

}

'''


question = '''

(2) Every Vtuber in `Vtube` can get new followers or lose their current followers. This is implemented by two methods: `insert_follower` and `remove_follower`. Now you are asked to implement these two methods:

a. For insert_follower, a follower name and follower age are given. You need to create a dynamically allocated object of `Follower` and insert it into the followers array (in the first available location), using `new` operator. If the array is full, you should double `follower_max`, allocate a new follower array, and move all the data into this `new` array, and insert the `new` follower. Write the code below.
'''

starter-code = '''
void Vtuber::insert_follower(const string& follower_name, 
                            int follower_age) {

  // Your code here

}
'''

answer = '''
void Vtuber::insert_follower(const string& follower_name, int follower_age) {
  follower_num++;
  for (int i = 0; i < follower_max; i++) {
    if (followers[i] == NULL) {
      followers[i] = new Follower(follower_name, follower_age);
      return;
    }
  }
  Follower** new_followers = new Follower*[2 * follower_max];
  for (int i = 0; i < follower_max; i++) {
    new_followers[i] = followers[i];
    new_followers[i + follower_max] = NULL;
  }
  new_followers[follower_max] = new Follower(follower_name, follower_age);
  delete[] followers;
  followers = new_followers;
  follower_max *= 2;
  return;
}
'''

append-before = '''
#include <iostream>
#include <string>
using namespace std;

class Follower {
 private:
  string name;
  int age;

 public:
  Follower(const string& _name, int _age) {
    name = _name;
    age = _age;
  }
  string get_name() const { return name; }
  int get_age() const { return age; }
};

class Vtuber {
 private:
  string name;
  Follower** followers;
  int follower_max;
  int follower_num;

 public:
  Vtuber(const string& _name);
  void insert_follower(const string& follower_name, int follower_age);

  // Extra helper for testcases
  void print_followers() const {
    cout << "Vtuber: " << name << " has " << follower_num << " followers:" << endl;
    for (int i = 0; i < follower_max; i++) {
      if (followers[i] != NULL) {
        cout << "- " << followers[i]->get_name()
             << " (age " << followers[i]->get_age() << ")" << endl;
      }
    }
  }
};

// Constructor from part (1)
Vtuber::Vtuber(const string& _name) {
  name = _name;
  follower_max = 2;
  follower_num = 0;
  followers = new Follower*[follower_max];
  for (int i = 0; i < follower_max; i++) {
    followers[i] = NULL;
  }
}
  
'''

main-function = '''

int main() {
  string vtuber_name;
  getline(cin, vtuber_name);  // full Vtuber name
  Vtuber v(vtuber_name);

  string command;
  while (cin >> command) {
    if (command == "Insert") {
      int n;
      cin >> n;
      for (int i = 0; i < n; i++) {
        string name;
        int age;
        cin >> name >> age;
        v.insert_follower(name, age);
      }
    } else {
      cerr << "Unknown command: " << command << endl;
      break;
    }
  }

  v.print_followers();
  return 0;
}

'''


[[exercises.testcases]]
input = "Q3.P2a.T1.in"
output = "Q3.P2a.T1.out"

[[exercises.testcases]]
input = "Q3.P2a.T2.in"
output = "Q3.P2a.T2.out"

[[exercises.testcases]]
input = "Q3.P2a.T3.in"
output = "Q3.P2a.T3.out"


[[exercises]]
question-id = "chapter-03-Q10"
title = "Question 10 in Fall 2022 Midterm Exam"
difficulty = "Challenging"
type = "function programming"
table = false
multipart = true

LLM = '''
A Vtuber is an online entertainer who posts videos on Vtube. A Vtuber will have followers on Vtube. As a programmer from Vtube, you are asked to implement a class for Vtuber. The class definition and description are described below.

```{code-block} cpp
#include <iostream>
#include <string>
using namespace std;

class Follower {
 private:
  string name;
  int age;

 public:
  Follower(const string& _name, int _age) {
    name = _name;
    age = _age;
  }
  string get_name() const { return name; }
  int get_age() const { return age; }
};
class Vtuber {
 private:
  // Vtuber Name
  string name;
  // Follower array with a variable size, each element should be a dynamically
  // allocated object of class Follower.
  Follower** followers;
  // The size of follower array.
  int follower_max;
  // Number of followers
  int follower_num;

 public:
  Vtuber(const string& _name);
  ~Vtuber();
  void insert_follower(const string& follower_name, int follower_age);
  void remove_follower(const string& follower_name);
};

```

Specifically, Vtuber's followers member variable is an array of pointers, each pointer pointing to a `Follower` object. 


(2) Every Vtuber in `Vtube` can get new followers or lose their current followers. This is implemented by two methods: `insert_follower` and `remove_follower`. Now you are asked to implement these two methods:

b. For `remove_follower`, a follower name is given. If there is any follower in the array matching the name, you should remove it and free its memory using `delete`. You can assume the follower names are all unique.

void Vtuber::remove_follower(const string& follower_name) {
  
  // Your code here

}

'''


question = '''
b. For `remove_follower`, a follower name is given. If there is any follower in the array matching the name, you should remove it and free its memory using `delete`. You can assume the follower names are all unique.
'''

starter-code = '''
void Vtuber::remove_follower(const string& follower_name) {
  
  // Your code here

}
'''

answer = '''
void Vtuber::remove_follower(const string& follower_name) {
  for (int i = 0; i < follower_max; i++) {
    if (followers[i] == NULL)  // 3 marks on skipping NULL members
      continue;
    if (followers[i]->get_name() == follower_name) {  // 1 mark
      follower_num--;                                 // 1 mark
      delete followers[i];                            // 2 mark
      followers[i] = NULL;                            // 1 mark
      break;
    }
  }
  return;
}
'''

append-before = '''
#include <iostream>
#include <string>
using namespace std;

class Follower {
 private:
  string name;
  int age;

 public:
  Follower(const string& _name, int _age) {
    name = _name;
    age = _age;
  }
  string get_name() const { return name; }
  int get_age() const { return age; }
};

class Vtuber {
 private:
  string name;
  Follower** followers;
  int follower_max;
  int follower_num;

 public:
  Vtuber(const string& _name);
  void insert_follower(const string& follower_name, int follower_age);
  void remove_follower(const string& follower_name);

  // Extra helper for testcases
  void print_followers() const {
    cout << "Vtuber: " << name << " has " << follower_num << " followers:" << endl;
    for (int i = 0; i < follower_max; i++) {
      if (followers[i] != NULL) {
        cout << "- " << followers[i]->get_name()
             << " (age " << followers[i]->get_age() << ")" << endl;
      }
    }
  }
};

// Constructor from part (1)
Vtuber::Vtuber(const string& _name) {
  name = _name;
  follower_max = 2;
  follower_num = 0;
  followers = new Follower*[follower_max];
  for (int i = 0; i < follower_max; i++) {
    followers[i] = NULL;
  }
}

// insert_follower from part (2a)
void Vtuber::insert_follower(const string& follower_name, int follower_age) {
  follower_num++;
  for (int i = 0; i < follower_max; i++) {
    if (followers[i] == NULL) {
      followers[i] = new Follower(follower_name, follower_age);
      return;
    }
  }
  Follower** new_followers = new Follower*[2 * follower_max];
  for (int i = 0; i < follower_max; i++) {
    new_followers[i] = followers[i];
    new_followers[i + follower_max] = NULL;
  }
  new_followers[follower_max] = new Follower(follower_name, follower_age);
  delete[] followers;
  followers = new_followers;
  follower_max *= 2;
  return;
}
'''


main-function = '''
int main() {
  string vtuber_name;
  getline(cin, vtuber_name);
  Vtuber v(vtuber_name);

  string command;
  while (cin >> command) {
    if (command == "Insert") {
      int n;
      cin >> n;
      for (int i = 0; i < n; i++) {
        string name;
        int age;
        cin >> name >> age;
        cout << "Inserting follower: " << name << " (age " << age << ")" << endl;
        v.insert_follower(name, age);
      }
    } else if (command == "Remove") {
      int n;
      cin >> n;
      for (int i = 0; i < n; i++) {
        string name;
        cin >> name;
        cout << "Removing follower: " << name << endl;
        v.remove_follower(name);
      }
    } else {
      cout << "Unknown command: " << command << endl;
    }
  }

  v.print_followers();
  return 0;
}
'''

[[exercises.testcases]]
input = "Q3.P2b.T1.in"
output = "Q3.P2b.T1.out"

[[exercises.testcases]]
input = "Q3.P2b.T2.in"
output = "Q3.P2b.T2.out"

[[exercises.testcases]]
input = "Q3.P2b.T3.in"
output = "Q3.P2b.T3.out"

[[exercises]]
question-id = "chapter-03-Q11"
title = "Question 10 in Fall 2022 Midterm Exam"
difficulty = "Challenging"
type = "explaination"
table = false
multipart = true

LLM = '''
A Vtuber is an online entertainer who posts videos on Vtube. A Vtuber will have followers on Vtube. As a programmer from Vtube, you are asked to implement a class for Vtuber. The class definition and description are described below.

```{code-block} cpp
#include <iostream>
#include <string>
using namespace std;

class Follower {
 private:
  string name;
  int age;

 public:
  Follower(const string& _name, int _age) {
    name = _name;
    age = _age;
  }
  string get_name() const { return name; }
  int get_age() const { return age; }
};
class Vtuber {
 private:
  // Vtuber Name
  string name;
  // Follower array with a variable size, each element should be a dynamically
  // allocated object of class Follower.
  Follower** followers;
  // The size of follower array.
  int follower_max;
  // Number of followers
  int follower_num;

 public:
  Vtuber(const string& _name);
  ~Vtuber();
  void insert_follower(const string& follower_name, int follower_age);
  void remove_follower(const string& follower_name);
};

```

Specifically, Vtuber's followers member variable is an array of pointers, each pointer pointing to a `Follower` object. 


(3) Implement the destructor for the `Vtuber` class. You should free all the dynamically allocated objects using `delete`. Remember to be consistent with your previous implementation, as the entire program should not trigger any segmentation fault.

Vtuber::~Vtuber() {
  
  // Your code here

}

'''


question = '''

(3) Implement the destructor for the `Vtuber` class. You should free all the dynamically allocated objects using `delete`. Remember to be consistent with your previous implementation, as the entire program should not trigger any segmentation fault.

'''
answer = """
<code>
Vtuber::~Vtuber() {

for (int i = 0; i < follower_max; i++) {

delete followers[i];  // delete NULL is safe;

}

delete[] followers;

}
</code>
"""